/* Box-Model contains 3 important measures:
Padding 1, closest to content box.
Border 2, closest to padding.
Margin 3, closest to border. 
 */

/* Width and height control the content box's size, here the box-content has same width and size. */
/* By default body margin will be set to 8 */
body {
    margin: 0;
}

div {
    width: 200px;
    height: 200px;
    /* background-color: #7bf1a8; */
}

h1 {
    background-color: pink;
    width: 200px;
    padding-left: 100px;
    padding-top: 50px;
    margin: 10px;
}

/*
Border controls the border of the box, most used properties are 
border-width : Control the thickness of the border.
border-color : Set the color of the border.
border-style : Set different styles of border.
<---------------------------------------------------->
Usage of right border technique:
-------------------------------
If border-sizing isn't used, the border-width will increase the size of the box changing the original box size.
With border-sizing the box remains same, the margin will increase inward by squeezing the content.
*/

#one {
    background-color: #7bf1a8aa;
    /* border-width: 3px; */
    border-color: rgb(139, 178, 255);
    border-style: solid;
    margin: 10px;
    /* box-sizing: border-box; */
}

#two {
    background-color: #3b8a59;
    /* border-width: 3px; */
    border-color: rgb(99, 61, 0);
    border-style: dashed;
    margin: 10px;
}

/* 
Using a single element like border can select all elements at once { width : style : color }. 

For granularity the border-style gives more control, example : {up :solid; right :solid; down :dotted; left:dashed;} can be styled.

These styles can be applied individually to each side of an element's border (top, right, bottom, left) to create a variety of visual effects.

border-radius: Makes the borders a bit smoothened in terms, can control all the borders just like border-style, making the border change shape with border radius.*/

#three {
    background-color: #1f452daa;
    border-width: 3px;
    border-color: rgb(255, 162, 0);
    border-style: solid none none dashed;
    border: 3px solid blueviolet;
    border-radius: 10px;
    margin: 10px;
}


/* Padding is the space between content and the border, which can be useful for making space for content to make visual enhancements.
    General Padding property , padding : {top;right;bottom;left}(clockwise).
    if padding : x% y% (vertical : horizontal) both sides in horizontal will be applied y% and vice versa for vertical.
    Example below:
    Funny meaning : layer of fat between muscle and skin i.e. Spacing on the inside of the border.
*/
button {
    padding: 20px 10px;
    padding: 12px 24px 36px 48px;
    padding: 10px;
    margin: 10px;
    /*Uniform adjustment of 10px from all sides.*/
}

/* Margin is the spacing i.e. outside the border. Incrases the space around the content box by certain pixels, percentage or any other metric.*/

h2 {
    background-color: lightgoldenrodyellow;
    border: 2px solid black;
    margin: 200px;
    display: inline;
    /*Here the element is block, but, using display we changed the value of the h2 to inline.*/
    /*Here in this example the margin of h2 element is 200px added from all sides,*/
}

span {
    height: 150%;
    width: 100%;
    background-color: lightyellow;
    border: 2px dotted red;
    padding: 40% 40%;
    /*
    Percentages are relative to box-content if it's in the context of box-model, 
    it will depend on the height and width of the box-content.
    Padding in our case cannot converge vertically instead margin can.
    */
    margin: 200px 100px;
    /*In this value, the size of the span will not have margins for the top and bottom increased, as span as inline element. */
    text-align: center;
    display: block;
    /*This property can make an element from inline to block and vice versa.
    Check the usage with commenting out.*/
}

/* Percentages are relative to either the parent or the element itself.*/


section {
    height: 800px;
    width: 800px;
    background-color: #00bfff;
    margin-bottom: 10%;
}

section>div {
    height: 75%;
    width: 75%;
    background-color: lightgreen;
    margin: 168.5px 0% 0% 0%;
}


section p {
    margin: 0 0 0 90%;
    text-align: right;
    color: black;
    font-size: 150%;
    font-weight: 600;
    border: 2px dashed black;
}

section div p {
    margin: 0 0 0 91.5%;
    display: inline;
    text-align: right;
    color: black;
    font-size: 150%;
    font-weight: 600;
    border: 2px dashed black;
}

/* 
Relative measurement is often used in em's and rem's, em's are common multiplier of parent elements or sometimes the element itself.
Whereas, rem's are root element multipliers. Both em's and rem's are used in different ways.  
 */
/* Advantage */
/* 
All the buttons will be a multiplier of the font size of the parent element. Scaling happens in relative to the parent element.
That makes the buttons below in .united scale well and the border-radius need not be adjusted for different sizes of button.
*/

.united {
    background-color: azure;
    font-size: 2em;
    border-radius: 1.5em;
    border-color: black;
}

/* Disadvantage of em, if there is a nesting in terms of elements, if the scaling is less than 1em.
then every time it will be < 1 times multiplier of parent element.
 */
#emunits {
    font-size: 10px;
}

/* 
As it nests down, the font will be increased by 1.5 times with given properties of #units and ul.
Compounding is one of the major downsides of the em when nested, to solve this we rem's.
--> 10px * 1.5 = (result)
--> (result.prev) * 1.5  = (result.next)
--> (result.prev) * 1.5....
 */
#emunits li {
    font-size: 1.5em;
}

/* 
rem ; root em's, which in general have single root as a relative unit and won't compound on nesting.
below is the comparision of the scaling 
*/
#remunits {
    font-size: 5px;
}

#remunits li {
    font-size: 1.5rem;
}