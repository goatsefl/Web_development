/* Specificity in css refers to the precedence and importance given to certain attributes.
Highest precedence =  ID
Mid level = Class
Low level = elements
Usage of !important, need to be restricted.
!important will override any selector and apply it to over other specificity rules. 

Also in terms of cascading, if both the elements are of same precedence, last applied property of the same element will cascade the previously given property, this works in how the call to .css file made in your html file as well.*/

/* Inheritance : When no value for an inherited property has been specified on an element,
 the element gets the computed value of that property on its parent element.
Only the root element of the document gets the initial value given in the property's summary.
EG:CSS file
 p {
  color: green;
}
HTML FILE
<p>This paragraph has <em>emphasized text</em> in it.</p>
Result will print the entire paragraph green, even the emphasized text under the paragraph.
<-------------------------------------------------------------------------------------------------------------------------> 
<-------------------------------------------------------------------------------------------------------------------------> 
<-------------------------------------------------------------------------------------------------------------------------> 
Non-inheritance:
When no value for a non-inherited property has been specified on an element,
the element gets the initial value of that property (as specified in the property's summary).
EG: CSS file 
 p {
  border: medium solid;
}
HTML file
<p>This paragraph has <em>emphasized text</em> in it.</p>
Result will print the border only for paragraph, not the em element. 
These wasn't inherited property unlike color, border property didn't get applied.
*/



* {
    color: darkgreen;
    background-color: beige;
}

/* A universal selector will select the entire page and apply the properties, "*" is the universal selector and using any property will be applied throughout the page.*/
/* The above selection will make page text to be entirely pink. */

h1,
h2 {
    /* User can select multiple tags at once in the selector area to apply provided tags with required properties,
    in this example i'm making all the tags weight to be 100 */
    font-weight: 100;
}

button {
    font-size: 30px;
    /* increases the button size to 30px size. */
}

/* To have specificity in terms of not selecting all the buttons, or elements, we can use unique selector.
id is a unique selector, where in we can use it on any element but, the naming should be unique, syntax is given below. */
#signup {
    color: darkgreen;
    background-color: lightgreen;
    font-size: 22px;
}

/*The below selector is for class, as unique selector will be only at numbered places in a page, for most of the scenarios we use classes.
They are defined by "." followed by class name, "flairs" is the class-name for the span element in starter.html */
.flairs {
    color: yellowgreen;
    background-color: blueviolet;
    font-size: small;
    font-weight: 800;
}

/*There are descendant selectors, if the user want to select nested tags from a group of parent tags i.e. 
PARENT_TAG DESCENDANT_TAG {property : value;}, the syntax here involves the "space" between PARENT_TAG "space" DESCENDANT_TAG.*/

span a {
    color: peachpuff;
    background-color: green;
    text-decoration: none;
}

/* The selector can be used in combination with class selector, i.e. .class_selector(PARENT_TAG) descendant_tag. */
.floaters a {
    color: darksalmon;
    background-color: grey;
}

/* Adjacent Selector and Direct child selector are 2 such selectors that require operators like "+" and ">" between selection of tags to work.*/

/* Adjacent Selector : Anything that appears after the operator(+) will be the primary focus of provided properties, if the preceding "tag,id or class" before operator(+) is appeared.
Example : */
/* This will make every <button> use these properties, after every <h2> tag. It's more of a follow-up tag in real-life scenario.*/
h2+button {
    color: chartreuse;
    font-size: large;
}

/* Direct Child Selector will select the direct child of the parent tag and those tag/tags will be in direct affect of the provided properties below. */
/* greater than a, in starter.html "Exotic" is the parent id and "a" is the direct child*/
#Exotic>a {
    text-decoration: underline wavy chocolate !important;
    font-size: 50px !important;
    background-color: darkred !important;
    color: beige !important;
    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif !important;
}

/* In the above values, !important is one of the values that will override all the tag properties and prioritize to the current selector.*

/* Attribute Selector is by name implies, selects the attribute of a tag for extensive styling properties.*/
/* Example: Attribute of input are being selected to be styled.*/


nav+input[type="text"] {
    color: greenyellow;
    font-size: large;
    font-family: Georgia, 'Times New Roman', Times, serif;
}

nav+input[type="password"] {
    color: purple;
    font-size: large;
}

/* Pseudo Classes : Keyword added to a selector that specifies a special state of the selected element(s). */
/*Selector: keyword */
button:hover {
    color: whitesmoke;
    background-color: saddlebrown;
}

/* List of Pseudo Classes :active,
 checked,
 first,
 first-child,
 hover,
 not(),
 nth-child(),
 nth-of-type() */
/* hover works when you hover the mouse on the specified selector */
button:active {
    color: black;
    background-color: aqua;
}

/* active works when the specified element is clicked with mouse (or) space-bar.*/
/* keyword is searching the attribute with class  = post, in this case, it needs to be matching(Case_sensitive).*/
section[class="post"] {
    background: #edf2f4;
}

a[href="youtube"] {
    font-size: small !important;
    background-color: #ffafcc !important;
    color: #fb8500 !important;
}

.post button:hover {
    color: whitesmoke;
    background-color: saddlebrown;
}

.post {
    background-color: #f5ebe0;
}

/* The nth-of-type selects for every post we are making the background color change for every 3rd post in the example below,
if needed, we can use a literal number, which will only highlight the 3rd(if nth-of-type(3)) section only. N will consider the entirety of .post.*/
.post:nth-of-type(n) {
    background-color: #f7ede2;
}


/* Pseudo Elements : Keywords added to a selector that lets you style a particular part of selected element(s). */
/* Usage : [selector :: keyword] (You can use a single colon to use the element, but it's good practice to differentiate between 2 different selectors.)*/
/* first letter of every H2 will inherit those properties. */
h2::first-letter {
    font-size: larger;
    color: #05008d8e;
    font-weight: 800;
}

/* first-line of every paragraph will inherit those properties. */
p::first-line {
    color: darkcyan;
    font-weight: 600;
}

/* selection inside the paragraph when selected elements inside the paragraph will provide visual queue to be orangered. */
p::selection {
    background-color: orangered;
}